/**
 * Generated by orval v6.14.4 üç∫
 * Do not edit manually.
 * Cherry Pick - FoodPrint
 * FoodPrint API description
 * OpenAPI spec version: 1.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  User,
  UserControllerFindAllParams,
  CreateUserDto,
  UserControllerUnfollow200,
  UserControllerFollow201,
  UserControllerFindOne200,
  UserControllerUpdate200,
  UpdateUserDto,
} from ".././model";
import { customInstance } from "../../../api/mutator/custom-instance";
import type { ErrorType, BodyType } from "../../../api/mutator/custom-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Find all users or by search term
 */
export const userControllerFindAll = (
  params?: UserControllerFindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<User[]>(
    { url: `/api/user`, method: "get", params, signal },
    options
  );
};

export const getUserControllerFindAllQueryKey = (
  params?: UserControllerFindAllParams
) => [`/api/user`, ...(params ? [params] : [])] as const;

export const getUserControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = ErrorType<unknown>
>(
  params?: UserControllerFindAllParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindAll>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof userControllerFindAll>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindAll>>
  > = ({ signal }) => userControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = ErrorType<unknown>;

export const useUserControllerFindAll = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = ErrorType<unknown>
>(
  params?: UserControllerFindAllParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindAll>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUserControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Register a new user
 * @summary Register a new user
 */
export const userControllerCreate = (
  createUserDto: BodyType<CreateUserDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/api/user`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createUserDto,
    },
    options
  );
};

export const getUserControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: BodyType<CreateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: BodyType<CreateUserDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerCreate>>,
    { data: BodyType<CreateUserDto> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerCreate>>
>;
export type UserControllerCreateMutationBody = BodyType<CreateUserDto>;
export type UserControllerCreateMutationError = ErrorType<unknown>;

export const useUserControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: BodyType<CreateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUserControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Follow another user
 */
export const userControllerUnfollow = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UserControllerUnfollow200>(
    { url: `/api/user/followers/${id}`, method: "delete" },
    options
  );
};

export const getUserControllerUnfollowMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUnfollow>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerUnfollow>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUnfollow>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return userControllerUnfollow(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerUnfollowMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUnfollow>>
>;

export type UserControllerUnfollowMutationError = ErrorType<unknown>;

export const useUserControllerUnfollow = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUnfollow>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUserControllerUnfollowMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Follow another user
 */
export const userControllerFollow = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UserControllerFollow201>(
    { url: `/api/user/followers/${id}`, method: "post" },
    options
  );
};

export const getUserControllerFollowMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerFollow>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerFollow>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerFollow>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return userControllerFollow(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerFollowMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFollow>>
>;

export type UserControllerFollowMutationError = ErrorType<unknown>;

export const useUserControllerFollow = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerFollow>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUserControllerFollowMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Find a given user by id
 */
export const userControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserControllerFindOne200>(
    { url: `/api/user/${id}`, method: "get", signal },
    options
  );
};

export const getUserControllerFindOneQueryKey = (id: string) =>
  [`/api/user/${id}`] as const;

export const getUserControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindOne>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof userControllerFindOne>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindOne>>
  > = ({ signal }) => userControllerFindOne(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type UserControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneQueryError = ErrorType<unknown>;

export const useUserControllerFindOne = <
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindOne>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUserControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update your profile
 */
export const userControllerUpdate = (
  id: unknown,
  updateUserDto: BodyType<UpdateUserDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UserControllerUpdate200>(
    {
      url: `/api/user/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options
  );
};

export const getUserControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    TError,
    { id: unknown; data: BodyType<UpdateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerUpdate>>,
  TError,
  { id: unknown; data: BodyType<UpdateUserDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    { id: unknown; data: BodyType<UpdateUserDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return userControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdate>>
>;
export type UserControllerUpdateMutationBody = BodyType<UpdateUserDto>;
export type UserControllerUpdateMutationError = ErrorType<unknown>;

export const useUserControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    TError,
    { id: unknown; data: BodyType<UpdateUserDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getUserControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
