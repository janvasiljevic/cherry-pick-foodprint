/**
 * Generated by orval v6.14.4 üç∫
 * Do not edit manually.
 * Cherry Pick - FoodPrint
 * FoodPrint API description
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  UseMutationOptions,
  MutationFunction,
} from "@tanstack/react-query";
import type {
  Ingridient,
  CreateIngridientDto,
  IngridientControllerRemove200,
  IngridientControllerUpdate200,
  UpdateIngridientDto,
} from ".././model";
import { customInstance } from ".././mutator/custom-instance";
import type { ErrorType, BodyType } from ".././mutator/custom-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const ingridientControllerCreate = (
  createIngridientDto: BodyType<CreateIngridientDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Ingridient>(
    {
      url: `/api/ingridient`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: createIngridientDto,
    },
    options
  );
};

export const getIngridientControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ingridientControllerCreate>>,
    TError,
    { data: BodyType<CreateIngridientDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ingridientControllerCreate>>,
  TError,
  { data: BodyType<CreateIngridientDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ingridientControllerCreate>>,
    { data: BodyType<CreateIngridientDto> }
  > = (props) => {
    const { data } = props ?? {};

    return ingridientControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type IngridientControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ingridientControllerCreate>>
>;
export type IngridientControllerCreateMutationBody =
  BodyType<CreateIngridientDto>;
export type IngridientControllerCreateMutationError = ErrorType<unknown>;

export const useIngridientControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ingridientControllerCreate>>,
    TError,
    { data: BodyType<CreateIngridientDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getIngridientControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const ingridientControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<IngridientControllerRemove200>(
    { url: `/api/ingridient/${id}`, method: "delete" },
    options
  );
};

export const getIngridientControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ingridientControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ingridientControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ingridientControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return ingridientControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type IngridientControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof ingridientControllerRemove>>
>;

export type IngridientControllerRemoveMutationError = ErrorType<unknown>;

export const useIngridientControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ingridientControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getIngridientControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions);
};
export const ingridientControllerUpdate = (
  id: string,
  updateIngridientDto: BodyType<UpdateIngridientDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<IngridientControllerUpdate200>(
    {
      url: `/api/ingridient/${id}`,
      method: "patch",
      headers: { "Content-Type": "application/json" },
      data: updateIngridientDto,
    },
    options
  );
};

export const getIngridientControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ingridientControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateIngridientDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ingridientControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateIngridientDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ingridientControllerUpdate>>,
    { id: string; data: BodyType<UpdateIngridientDto> }
  > = (props) => {
    const { id, data } = props ?? {};

    return ingridientControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type IngridientControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof ingridientControllerUpdate>>
>;
export type IngridientControllerUpdateMutationBody =
  BodyType<UpdateIngridientDto>;
export type IngridientControllerUpdateMutationError = ErrorType<unknown>;

export const useIngridientControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ingridientControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateIngridientDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getIngridientControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
