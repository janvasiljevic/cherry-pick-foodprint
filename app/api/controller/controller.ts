/**
 * Generated by orval v6.14.4 üç∫
 * Do not edit manually.
 * Cherry Pick - FoodPrint
 * FoodPrint API description
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  UseMutationOptions,
  MutationFunction,
} from "@tanstack/react-query";
import { customInstance } from ".././mutator/custom-instance";
import type { ErrorType } from ".././mutator/custom-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const devControllerSeed = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/dev/seed`, method: "post" },
    options
  );
};

export const getDevControllerSeedMutationOptions = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof devControllerSeed>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof devControllerSeed>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof devControllerSeed>>,
    TVariables
  > = () => {
    return devControllerSeed(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DevControllerSeedMutationResult = NonNullable<
  Awaited<ReturnType<typeof devControllerSeed>>
>;

export type DevControllerSeedMutationError = ErrorType<unknown>;

export const useDevControllerSeed = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof devControllerSeed>>,
    TError,
    TVariables,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const mutationOptions = getDevControllerSeedMutationOptions(options);

  return useMutation(mutationOptions);
};
